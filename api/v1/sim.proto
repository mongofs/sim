syntax = "proto3";

package im.basic;
option go_package = "grpc";

message Empty{}

// ==========================SendMsg ================/

message load{
  // 1. load is too high
  // 2. user is not online
  map<string, string> token = 1 ; // token : err,
}

message SendMsgReq {
  repeated string token = 1;
  bytes data = 2;
}


message SendMsgResp{
  string msgID = 1;
  load filed = 2;
  repeated  string success = 3;
}

// ===================================================



message OnlineReply{
  int64 number = 1 ;
}

message BroadcastReq{
  bytes data = 1;
}

message BroadcastReply{
  int64  size = 1 ;
}


message PushToClient{
  int64 sid = 1 ;
  bytes msg = 2 ;
}


// target1 ,content1
// target2 ,content2
message WTIBroadcastReq{
  map<string, bytes> data = 1;
}

message WTIBroadcastReply {
  repeated string failed = 1 ;
}

message WtiBroadcastWithInnerJoinReq {
  bytes  data = 1 ;
  repeated  string tags = 2;
}

message WtiBroadcastWithInnerJoinReply{

}

message WTITargetInfoReq {
  string tag = 1 ;
}

message gInfo{
  map<string,string> gInfo =1 ;
}

message WTITargetInfoReply {
  string tag = 1 ;
  int32  online =2 ;
  int32  limit =3;
  int64  create_time =4 ;
  int32  status =5 ;
  int32  numG =6;
  repeated  gInfo gInfos =7;
}


service Basic {
  // Ping Service
  rpc Ping(Empty) returns(Empty);
  rpc Online(Empty)returns (OnlineReply);
  rpc SendMsg(SendMsgReq) returns (SendMsgResp);
  rpc Broadcast(BroadcastReq) returns (BroadcastReply);

  rpc WTITargetInfo (WTITargetInfoReq) returns(WTITargetInfoReply);
  rpc WTIBroadcastByTarget(WTIBroadcastReq) returns (BroadcastReply);
  rpc WTIBroadCastWithInnerJoinTag(WtiBroadcastWithInnerJoinReq) returns (BroadcastReply);
}